# Sets the base image for subsequent instructions
# The base image for the Docker build
ARG ARG_BUILD_FROM=" nvidia/cuda:12.1.0-devel-ubuntu22.04"

## Builder stage
FROM $ARG_BUILD_FROM as builder-base

# Setting this argument prevents interactive prompts during the build process
ARG DEBIAN_FRONTEND=noninteractive
# Updates the image and installs necessary packages
RUN apt-get update --fix-missing \
    && apt-get install -y curl git \
    python3.10-venv python3-dev python3-pip build-essential \
    # Cleans up unnecessary packages to reduce image size
    && apt-get autoremove -y \
    && apt-get clean -y

# Sets Python environment variables
ENV PIP_DEFAULT_TIMEOUT 100
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Setting ARGs and ENVs for the app
ARG ARG_APP_INSTALL_ROOT="/opt"
ENV APP_INSTALL_ROOT $ARG_APP_INSTALL_ROOT
ENV APP_VIRTUAL_ENV=${APP_INSTALL_ROOT}/venv
ENV PATH="$APP_VIRTUAL_ENV/bin:$PATH"

ARG ARG_TORCH_CUDNN=cu121
ENV TORCH_CUDNN=$ARG_TORCH_CUDNN

# Install pytorch before all other pip packages
RUN --mount=type=cache,target=/root/.cache/pip \
    python3.10 -m venv ${APP_VIRTUAL_ENV} &&\
    pip install --upgrade pip setuptools wheel ninja && \
    pip install torch torchvision torchaudio \
    --extra-index-url https://download.pytorch.org/whl/${TORCH_CUDNN}

#### App builder stage ---------------------------------------

# App builder
FROM builder-base AS app-builder

# Setting ARGs and ENVs for the app
ARG ARG_APP_SOURCE_REPO="entelecheia/text-generation-webui"
ARG ARG_APP_INSTALL_ROOT="/opt"
ARG ARG_APP_DIRNAME="txtgen-webui"
ARG ARG_APP_SOURCE_BRANCH="main"
ARG ARG_APP_SERVICE_NAME="app"
ENV APP_SOURCE_REPO $ARG_APP_SOURCE_REPO
ENV APP_INSTALL_ROOT $ARG_APP_INSTALL_ROOT
ENV APP_DIRNAME $ARG_APP_DIRNAME
ENV APP_SOURCE_BRANCH $ARG_APP_SOURCE_BRANCH
ENV APP_SERVICE_NAME $ARG_APP_SERVICE_NAME
ENV APP_SRC_DIR=${APP_INSTALL_ROOT}/${APP_DIRNAME}
ENV APP_DIR=${APP_INSTALL_ROOT}/app
ENV APP_VIRTUAL_ENV=${APP_INSTALL_ROOT}/venv
ENV APP_WORKSPACE_ROOT=${APP_INSTALL_ROOT}/workspace

ARG ARG WEBUI_VERSION
ENV WEBUI_VERSION $ARG_WEBUI_VERSION

# Sets the working directory to workspace root
WORKDIR $APP_INSTALL_ROOT
# Copies scripts from host into the image
COPY ./.docker/scripts/ ./scripts/

# Clones the app repository from GitHub
RUN git clone --branch $APP_SOURCE_BRANCH https://github.com/${ARG_APP_SOURCE_REPO}.git ${APP_SRC_DIR} &&\
    cd ${APP_SRC_DIR} &&\
    git reset --hard ${WEBUI_VERSION}

ENV LLAMA_CUBLAS=1
# Copy source to app
RUN cp -ar ${APP_SRC_DIR} ${APP_DIR}

# Install oobabooga/text-generation-webui
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install -r ${APP_DIR}/requirements.txt

# Install extension requirements
RUN --mount=type=cache,target=/root/.cache/pip,rw \
    for ext in ${APP_DIR}/extensions/*/requirements.txt; do \
    cd "$(dirname "$ext")"; \
    pip install -r requirements.txt; \
    done

# Clone default GPTQ
RUN git clone https://github.com/oobabooga/GPTQ-for-LLaMa.git -b cuda ${APP_DIR}/repositories/GPTQ-for-LLaMa
# Build and install default GPTQ ('quant_cuda')
ARG ARG_TORCH_CUDA_ARCH_LIST="6.1;7.0;7.5;8.0;8.6+PTX"
ENV TORCH_CUDA_ARCH_LIST="${ARG_TORCH_CUDA_ARCH_LIST}"
RUN cd ${APP_DIR}/repositories/GPTQ-for-LLaMa/ && python3 setup_cuda.py install

# Install flash attention for exllamav2
RUN pip install flash-attn --no-build-isolation


#### Runtime stage ---------------------------------------

# Runtime image (copy built virtual environment)
# FROM $ARG_BUILD_FROM AS runtime
FROM nvidia/cuda:12.3.1-runtime-ubuntu22.04 AS runtime

# Sets labels for the image
LABEL org.opencontainers.image.source="https://github.com/entelecheia/txtgen-webui-container"
LABEL org.opencontainers.image.description="A Docker container for text-generation-webui, a Gradio web UI for running Large Language Models like GPT-J, OPT, GALACTICA, LLaMA, and Pygmalion."
LABEL org.opencontainers.image.licenses="MIT"

# Setting this argument prevents interactive prompts during the build process
ARG DEBIAN_FRONTEND=noninteractive
# Updates the image and installs necessary packages
RUN apt-get update --fix-missing \
    && apt-get install -y curl wget jq sudo gosu git \
    python3.10-venv python3-dev python3-pip build-essential \
    locales locales-all fontconfig fonts-nanum libportaudio2 libasound-dev make g++ ffmpeg \
    tzdata openssh-server \
    # Cleans up unnecessary packages to reduce image size
    && apt-get autoremove -y \
    && apt-get clean -y

# Sets Python environment variables
ENV PIP_DEFAULT_TIMEOUT 100
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Setting ARGs and ENVs for the app
ARG ARG_APP_INSTALL_ROOT="/opt"
ARG ARG_APP_DIRNAME="txtgen-webui"
ENV APP_INSTALL_ROOT $ARG_APP_INSTALL_ROOT
ENV APP_DIRNAME $ARG_APP_DIRNAME
ENV APP_SRC_DIR=${APP_INSTALL_ROOT}/${APP_DIRNAME}
ENV APP_DIR=${APP_INSTALL_ROOT}/app
ENV APP_VIRTUAL_ENV=${APP_INSTALL_ROOT}/venv
ENV APP_WORKSPACE_ROOT=${APP_INSTALL_ROOT}/workspace

ENV PATH="$APP_VIRTUAL_ENV/bin:$PATH"

# Copy the virtual environment from the builder stage
COPY --from=app-builder ${APP_VIRTUAL_ENV} ${APP_VIRTUAL_ENV}
# Copy app and src
COPY --from=app-builder ${APP_DIR} ${APP_DIR}
COPY --from=app-builder ${APP_SRC_DIR} ${APP_SRC_DIR}

RUN cp "$APP_VIRTUAL_ENV/lib/python3.10/site-packages/bitsandbytes/libbitsandbytes_cuda121.so" "$APP_VIRTUAL_ENV/lib/python3.10/site-packages/bitsandbytes/libbitsandbytes_cpu.so"

# Sets the time zone within the container
ENV TZ="Asia/Seoul"
# Sets up the locale to en_US.UTF-8
RUN localedef -v -c -i en_US -f UTF-8 en_US.UTF-8 || true

WORKDIR ${APP_INSTALL_ROOT}

# Specifies the command that will be executed when the container is run
CMD ["bash"]
